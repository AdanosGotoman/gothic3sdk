#ifndef GE_APPLICATION_H_INCLUDED
#define GE_APPLICATION_H_INCLUDED

class eCSplash;
class eCMouse;

struct eSSetupApplication;
struct eSSetupEngine;
struct eSHardwareEnvironmentDesc;
struct eSDescRenderTarget;

struct HINSTANCE__;
struct HWND__;


class GE_DLLIMPORT eCApplication :
    public eCWindow
{
    public:    virtual eCEntity * GetEditorEntity( void ) const;
    public:    virtual GEBool     IsEditorRunning( void ) const;
    public:    virtual GEBool     IsGameRunning( void ) const;
    public:    virtual bCString   GetCompiledMeshPath( void ) const;
    public:    virtual bCString   GetCompiledMaterialLibPath( void ) const;
    public:    virtual bCString   GetCompiledAnimationPath( void ) const;
    public:    virtual bCString   GetCompiledImagePath( void ) const;
    public:    virtual bCString   GetCompiledPhysicPath( void ) const;
    public:    virtual void       Draw( HWND__ * );
    public:    virtual void       ReSize( void );
    protected: virtual void       OnEngineCreated( void );
    protected: virtual void       OnDestroyEngine( void );
    protected: virtual void       OnDestroyWorkspace( void );
    protected: virtual void       OnPostInitializeModules( void );
    protected: virtual bEResult   OnInitializeApplication( eSSetupApplication & );
    protected: virtual bEResult   OnCreateWindow( eCWindow::eSCreate & );
    protected: virtual bEResult   OnInitializeEngine( eSSetupEngine & );
    protected: virtual void       OnPostRender( void );
    protected: virtual void       OnPreRender( void );
    protected: virtual void       OnKeyboard( void );
    protected: virtual void       OnMouse( void );
    protected: virtual void       OnRenderDraw( void );
    public:    virtual void       OnRun( void );
    public:    virtual void       OnProcess( void );
    public:    virtual void       OnWorldActivate( void );
    public:    virtual void       OnWorldDeactivate( void );
    protected: virtual void       CreateMainMenu( void );
    protected: virtual bEResult   CreateWorkspace( void );
    protected: virtual void       DestroyWorkspace( void );
    protected: virtual void       CreateInputDevices( void );
    public: using bCObjectBase::CopyFrom;
    protected: virtual void       CopyFrom( eCApplication const & );
    protected: virtual GEBool     OnHandleMessage( GEUInt, GEUInt, GEI32, GEI32 * );
    public:    virtual GEBool     SaveConfigFiles( void );
    public:    virtual GEBool     LoadConfigFiles( void );
    public:    virtual void       Destroy( void );
    protected: virtual bEResult   Create( void );
    public:    virtual           ~eCApplication( void );
    public: using eCMessageHandler::HandleMessage;
    protected: virtual GEInt      HandleMessage( HWND__ *, GEUInt, GEUInt, GEI32 );
    protected: virtual GEInt      OnIdle( GEUInt, GEI32 );
    protected: virtual GEInt      OnSize( GEUInt, GEI32 );
    protected: virtual GEInt      OnPaint( GEUInt, GEI32 );
    protected: virtual GEInt      OnKillFocus( GEUInt, GEI32 );
    protected: virtual GEInt      OnSetFocus( GEUInt, GEI32 );
    protected: virtual GEInt      OnSysCommand( GEUInt, GEI32 );
    public: using eCWindow::Create;
    public: using eCWindow::OnQuit;

    protected:
        static GEBool          ms_bEngineCreated;
        static GEBool          ms_bInitialised;
        static eCApplication * ms_pApplication;
        static eCSplash *      ms_pSplash;

    public:
        static void GE_STDCALL            CreateSplashScreen( void );
        static void GE_STDCALL            DestroySplashScreen( void );
        static eCApplication & GE_STDCALL GetInstance( void );
        static GEBool GE_STDCALL          IsEngineCreated( void );
        static GEBool GE_STDCALL          IsInitialised( void );

    public:
        eCApplication( eCApplication const & );
        eCApplication( void );

    public:
        void                        ConfineCursor( void );
        bEResult                    Create( HINSTANCE__ *, bCString const &, bCString const & );
        void                        DrawTo( HWND__ * );
        void                        DrawTo( HWND__ *, eCCameraBase const & );
        void                        ForceDeviceReset( void );
        bCString                    GetApplicationFileName( void );
        bCString                    GetApplicationVersionString( void );
        GEFloat                     GetAverageFrameTime( void ) const;
        bCString const &            GetCommandLineA( void ) const;
        eCConfigFile &              GetConfigFile( void );
        eCConsole &                 GetConsole( void );
        eCCameraBase &              GetCurrentCamera( void );
        eSSetupEngine const &       GetEngineSetup( void ) const;
        GEFloat                     GetFPS( void ) const;
        void                        GetFileVersion( GEU32 &, GEU32 &, GEU32 &, GEU32 & );
        GEFloat                     GetFrameTime( void ) const;
        GEFloat                     GetFrameTimeInSeconds( void ) const;
        eSHardwareEnvironmentDesc & GetHardwareEnvironmentDesc( void );
        eCKeyboard &                GetKeyboard( void );
        GEFloat                     GetLastFrameTime( void ) const;
        GEFloat                     GetLastFrameTimeInSeconds( void ) const;
        GEFloat                     GetLastScaledFrameTime( void ) const;
        GEFloat                     GetLastScaledFrameTimeInSeconds( void ) const;
        eCConfigFile &              GetLocalConfigFile( void );
        eCMenu &                    GetMainMenu( void );
        GEU32                       GetMasterFrameCounter( void );
        GEFloat                     GetMaxFPS( void ) const;
        GEFloat                     GetMaxFrameTime( void ) const;
        eCModuleAdmin &             GetModuleAdmin( void );
        eCMouse &                   GetMouse( void );
        GEFloat                     GetOOFrameTime( void ) const;
        GEFloat                     GetOOFrameTimeInSeconds( void ) const;
        GEFloat                     GetOOScaledFrameTime( void ) const;
        GEFloat                     GetOOScaledFrameTimeInSeconds( void ) const;
        void                        GetOptimalCacheSizes( GEBool, GEU32 &, GEU32 &, GEU32 &, GEU32 &, GEU32 &, GEU32 &, GEU32 & );
        eSDescRenderTarget const &  GetRenderTargetDesc( void ) const;
        GEFloat                     GetScaledFrameTime( void ) const;
        GEFloat                     GetScaledFrameTimeInSeconds( void ) const;
        eSSetupEngine const &       GetSetupEngineDesc( void ) const;
        GEFloat                     GetTimeScaling( void ) const;
        GEU32                       GetTotalTime( void ) const;
        GEFloat                     GetTotalTimeFloat( void ) const;
        GEBool                      IsCameraValid( void ) const;
        GEBool                      IsExceptionHandlingEnabled( void ) const;
        GEBool                      IsInCompilingState( void ) const;
        GEBool                      IsInputDeviceEnabled( void );
        GEBool                      IsPaused( GEBool );
        void                        PlayVideo( bCString const & );
        void                        Process( void );
        void                        RenderAndDrawTo( HWND__ *, eCCameraBase const &, GEBool );
        void                        RenderAndDrawTo( HWND__ *, GEBool );
        bEResult                    Run( void );
        void                        SetCurrentCamera( eCCameraBase const * );
        void                        SetFixedFPS( GEFloat );
        void                        SetFixedFrameTime( GEFloat );
        void                        SetFixedFrameTimeSingleStep( GEFloat );
        void                        SetIntoCompilingState( GEBool );
        void                        SetMaxFPS( GEFloat );
        void                        SetMinFPS( GEFloat );
        void                        SetPaused( GEBool );
        void                        SetTargetWindow( HWND__ * );
        void                        SetTimeScaling( GEFloat );
        void                        SetTimerIsSmooth( GEBool );
        void                        SetWarmUp( GEBool );
        void                        ShowSplashImage( bCString const &, GEU32 );
        void GE_STDCALL             Snapshot( bCObjectRefBase *, bCEvent * );
        void GE_STDCALL             ToggleFullScreen( bCObjectRefBase *, bCEvent * );
        void                        ToggleResolution( eCGfxShared::eSGfxContextDesc const &, GEBool );

    protected:
        static GEBool GE_STDCALL g_ErrorApplicationCall( bEErrorType, GEU32 );
        static GEBool GE_STDCALL g_TerminateApplicationCall( bEErrorType, GEU32 );

    protected:
        eCApplication const & operator = ( eCApplication const & );

    protected:
        void            CalculateHardwareEnvironment( void );
        void            CopyTo( eCApplication & ) const;
        void            CreateActionMapper( void );
        void            CreateConsole( void );
        bEResult        CreateEngine( void );
        bEResult        CreateGraphicsSubsystem( eSSetupEngine &, GEBool );
        void            CreateInputSubsystem( void );
        bEResult        CreateModules( void );
        bEResult        CreateRenderTarget( void );
        void            CreateSoundSubsystem( eSSetupEngine & );
        void            DestroyActionMapper( void );
        void            DestroyConsole( void );
        void            DestroyEngine( void );
        void            DestroyGraphicsSubsystem( void );
        void            DestroyInputSubsystem( void );
        void            DestroyMainMenu( void );
        void            DestroyModules( void );
        void            DestroyRenderTarget( void );
        void            DestroySoundSubsystem( void );
        void            DoRender( GEBool );
        void            DoSnapshot( void );
        void            Invalidate( void );
        void GE_STDCALL OnCaps( bCObjectRefBase *, eCConsoleEventArg * );
        void GE_STDCALL OnMenuDLLInformation( bCObjectRefBase *, bCEvent * );
        void GE_STDCALL OnMenuDebugToggleAniInfos( bCObjectRefBase *, bCEvent * );
        void GE_STDCALL OnMenuDebugToggleBoundingBoxesClicked( bCObjectRefBase *, bCEvent * );
        void GE_STDCALL OnMenuDebugToggleEntityAxesClicked( bCObjectRefBase *, bCEvent * );
        void GE_STDCALL OnMenuDebugToggleEntityNamesClicked( bCObjectRefBase *, bCEvent * );
        void GE_STDCALL OnMenuDebugToggleModelSkeletonClicked( bCObjectRefBase *, bCEvent * );
        void GE_STDCALL OnMenuDebugToggleOcclusionCullingClicked( bCObjectRefBase *, bCEvent * );
        void GE_STDCALL OnMenuDebugViewChildDependenciesClicked( bCObjectRefBase *, bCEvent * );
        void GE_STDCALL OnPlayAni( bCObjectRefBase *, eCConsoleEventArg * );
        void GE_STDCALL OnQuit( bCObjectRefBase *, bCEvent * );
        void GE_STDCALL OnShowPosition( bCObjectRefBase *, eCConsoleEventArg * );
        void GE_STDCALL OnSpy( bCObjectRefBase *, eCConsoleEventArg * );
        void GE_STDCALL OnToggleMemDebug( bCObjectRefBase *, eCConsoleEventArg * );
        void            RelaxTick( GEFloat );
        void            ResetFullscreen( void );
        void            UpdateTick( void );

};

#pragma pack(push, 1)
struct eSSetupEngine
{
    GEU8    f0[4];
    GEInt   SoundMasterVolume;
    GEInt   SoundMusicVolume;
    GEInt   SoundVoiceVolume;
    GEInt   SoundEffectVolume;
    GEInt   SoundAmbientVolume;
    GEU8    f18[4];
    GEU8    byte1C;
    GEU8    f1D[3];
    GEU32   Quality;
    GEU32   Width;
    GEU32   Height;
    GEU32   RefreshRate;
    GEU8    AdapterNumber[4];
    GEU8    byte34;
    GEU8    f35[1];
    GEU8    byte36;
    GEU8    f37[1];
    GEFloat float38;
    GEU8    f3C[4];
    GEU32   dword40;
    GEU8    f44[8];
    GEU32   dword4C;
    GEU32   dword50;
    GEU32   dword54;
    GEU32   dword58;
    GEU32   dword5C;
    GEU32   dword60;
    GEU32   dword64;
    GEU32   dword68;
    GEU32   dword6C;
    GEU32   dword70;
    GEU32   dword74;
    GEU32   dword78;
    GEU32   dword7C;
    GEU32   dword80;
    GEU8    byte84;
    GEU8    f85[19];
    GEU32   Entity_ROI;
    GEU32   dword9C;
    GEU32   dwordA0;
    GEU32   dwordA4;
    GEU8    fA8[5];
    GEU8    byteAD;
    GEU8    fAE[2];
    GEU32   dwordB0;
    GEU8    fB4[5];
    GEU8    byteB9;
    GEU8    byteBA;
    GEU8    fBB[1];
    GEU32   dwordBC;
    GEU8    byteC0;
    GEU8    byteC1;
    GEU8    byteC2;
    GEU8    byteC3;
    GEU8    byteC4;
    GEU8    byteC5;
    GEU8    byteC6;
    GEU8    byteC7;
    GEU8    fC8[1];
    GEU8    byteC9;
    GEU8    byteCA;
    GEU8    fCB[1];
    GEU32   dwordCC;
    GEU8    fD0[8];
    GEU32   dwordD8;
    GEU32   dwordDC;
    GEU8    fE0[16];
    GEU32   dwordF0;
    GEU8    byteF4;
    GEU8    fF5[3];
    GEU32   dwordF8;
    GEU32   dwordFC;
    GEU32   dword100;
    GEU32   dword104;
    GEU8    f108[8];
    GEU8    byte110;
    GEU8    byte111;
    GEU8    byte112;
    GEU8    byte113;
    GEU8    byte114;
    GEU8    byte115;
    GEU8    f116[2];
    GEU8    byte118;
    GEU8    f119[15];
    GEU32   dword128;
    GEU32   dword12C;
    GEU32   dword130;
    GEU32   dword134;
    GEU32   dword138;
    GEU8    f13C[4];
    GEU8    byte140;
    GEU8    f141[3];
    GEU32   dword144;
    GEU32   dword148;
    GEU32   dword14C;
    GEU32   dword150;
    GEU32   dword154;
    GEU32   dword158;
    GEU32   dword15C;
    GEU32   dword160;
    GEU32   dword164;
    GEU32   dword168;
    GEU32   dword16C;
    GEU8    byte170;
    GEU8    f171[3];
    GEU32   dword174;
    GEU32   dword178;
    GEU32   dword17C;
    GEU32   dword180;
    GEU8    byte184;
    GEU8    f185[3];
    GEU32   Render_FeedbackHPThreshold;
    GEU32   dword18C;
    GEU32   dword190;
    GEU32   dword194;
    GEU8    byte198;
    GEU8    f199[1];
    GEBool  Render_DisableHWShadowMap;
    GEBool  Render_DisableShaderCache;
    GEU32   Render_Nvidia3DVisionFix;
    GEU8    byte1A0;
    GEU8    byte1A1;
    GEU8    byte1A2;
    GEU8    f1A3[1];
    GEU32   dword1A4;
    GEU32   dword1A8;
    GEU8    ColorsSetup;
    GEU8    byte1AD;
    GEU8    byte1AE;
    GEU8    byte1AF;
    GEU8    CaptureCursor[12];
    GEBool  ShowSubtitle;
    GEU8    byte1BD;
    GEU8    f1BE[34];
    bCString Difficulty;
    GEU32   dword1E4;
    GEU8    byte1E8;
    GEU8    byte1E9;
    GEBool  AlternativeBalancing;
    GEBool  AlternativeAI;
    GEU32   MinHitDuration;
    GEU32   XPModifier;
    GEBool  QuickLoot;
    GEU8    f1F5[25];
    GEU8    byte20E;
    GEU8    byte20F;
};
#pragma pack(pop)

#endif
